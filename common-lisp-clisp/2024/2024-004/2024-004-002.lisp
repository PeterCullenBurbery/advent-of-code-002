(defun read-grid (file-path)
  (with-open-file (stream file-path :direction :input)
    (loop for line = (read-line stream nil)
          until (null line)
          collect (coerce line 'list))))

(defun count-all-xmas-patterns (grid)
  (let* ((rows (length grid))
         (cols (length (first grid)))
         (count 0))
    (labels ((get-cell (r c)
               (if (and (>= r 0) (< r rows) (>= c 0) (< c cols))
                   (nth c (nth r grid))
                   nil))
             (check-pattern (r c)
               (let* ((center (get-cell r c))
                      (top-left (get-cell (- r 1) (- c 1)))
                      (top-right (get-cell (- r 1) (+ c 1)))
                      (bottom-left (get-cell (+ r 1) (- c 1)))
                      (bottom-right (get-cell (+ r 1) (+ c 1))))
                 (and (char= center #\A)
                      (or (and (char= top-left #\M) (char= top-right #\S)
                               (char= bottom-left #\M) (char= bottom-right #\S))
                          (and (char= top-left #\S) (char= top-right #\M)
                               (char= bottom-left #\S) (char= bottom-right #\M))
                          (and (char= top-left #\M) (char= top-right #\M)
                               (char= bottom-left #\S) (char= bottom-right #\S))
                          (and (char= top-left #\S) (char= top-right #\S)
                               (char= bottom-left #\M) (char= bottom-right #\M)))))))
      (loop for r from 1 below (- rows 1)
            do (loop for c from 1 below (- cols 1)
                     do (when (check-pattern r c)
                          (setf count (+ count 1)))))
      count)))

;; Main logic
(let* ((file-path "/uploads/input.txt")
       (grid (read-grid file-path))
       (total-xmas-patterns (count-all-xmas-patterns grid)))
  (format t "Total X-MAS patterns: ~A~%" total-xmas-patterns))
