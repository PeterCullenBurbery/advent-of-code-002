(define (read-grid file-path)
  (with-input-from-file file-path
    (lambda ()
      (let loop ((lines '()))
        (let ((line (read-line)))
          (if (eof-object? line)
              (reverse lines)
              (loop (cons (string->list line) lines))))))))

(define (count-all-xmas-patterns grid)
  (let* ((rows (length grid))
         (cols (length (car grid)))
         (count 0))
    (define (get-cell r c)
      (if (and (>= r 0) (< r rows) (>= c 0) (< c cols))
          (list-ref (list-ref grid r) c)
          #f))
    (define (check-pattern r c)
      (let* ((center (get-cell r c))
             (top-left (get-cell (- r 1) (- c 1)))
             (top-right (get-cell (- r 1) (+ c 1)))
             (bottom-left (get-cell (+ r 1) (- c 1)))
             (bottom-right (get-cell (+ r 1) (+ c 1))))
        (and (char=? center #\A)
             (or (and (char=? top-left #\M) (char=? top-right #\S)
                      (char=? bottom-left #\M) (char=? bottom-right #\S))
                 (and (char=? top-left #\S) (char=? top-right #\M)
                      (char=? bottom-left #\S) (char=? bottom-right #\M))
                 (and (char=? top-left #\M) (char=? top-right #\M)
                      (char=? bottom-left #\S) (char=? bottom-right #\S))
                 (and (char=? top-left #\S) (char=? top-right #\S)
                      (char=? bottom-left #\M) (char=? bottom-right #\M))))))
    (do ((r 1 (+ r 1)))
        ((>= r (- rows 1)))
      (do ((c 1 (+ c 1)))
          ((>= c (- cols 1)))
        (if (check-pattern r c)
            (set! count (+ count 1)))))
    count))

;; Main logic
(define file-path "/uploads/input.txt")
(let* ((grid (read-grid file-path))
       (total-xmas-patterns (count-all-xmas-patterns grid)))
  (display "Total X-MAS patterns: ")
  (display total-xmas-patterns)
  (newline))
